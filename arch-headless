#!/usr/bin/bash
# by wm/wiemag/dif, original date 2013-09-09
# ---==== INSTALL ARCH LINUX ON A HEADLESS SERVER ====-------------------------
# How to remaster arch.iso image so that it starts automatically, allowing an ssh-administered ("blind") installation of a headless server.
# Assumptions about the computer system arch linux will be installed on:
# - it boots from a CD/DVD first
# - it is connected to the local network
# Currently, the official installation media start with the ssh daemon down.
# v0.95 first published
# v1.00 enable hating/braking and resuming the script to allow manual modifications
# v1.01 optimisations: less copying, ISO unmounted early
# Further devel (time permitting) notes:
# - do not copy all files to path/archiso, do not copy those to be deleted as unwanted arch.
# - use /tmp (if enough space)
# - man pages and PKGBUILD; AUR?

VERSION=1.01

# Checking missing dependencies -----------------
if [ -z $(which unsquashfs) ]; then
	echo "The squashfs-tools package is needed."
	read -n1 -sp "Install? (y/N) " INST 
	[[ ${INST/y/Y} = "Y" ]] && { PKGS="squashfs-tools"; echo -ne "\r";} || \
		{ echo -e "\rCome back when you are ready."; exit;}
fi

if [ -z $(which genisoimage) ]; then
	echo -n "The cdrkit package missing"
	(( ${#PKGS} )) && echo ", too." || echo "."
	read -n1 -sp "Install? (y/N) " INST 
	[[ ${INST/y/Y} = "Y" ]] && { PKGS=${PKGS- }" cdrkit"; PKGS=${PKGS/#  /};} || \
		{ echo -e "\rCome back when you are ready."; exit;}
fi

# Installing missing dependencies ---------------
if [[ ${#PKGS} -gt 0 ]]; then
	echo -e "\r\e[32;1msudo pacman -S ${PKGS}\e[0m"
	sudo pacman -S ${PKGS}
fi

# Declarations and initialisation ---------------
function usage() {
	echo -e "\n\e[1march-headless [ -a 32 | 64 ] arch.iso | -h\e[0m\n"
	echo -e "\tarch.iso - path to arch-install-media.iso"
	echo -e "\t           e.g. archlinux-2013.09.01-dual.iso"
	echo -e "\t           or /path/to/archlinux-2013.09.01-dual.iso"
	echo -e "\t-a 32 - create iso for a 32-bit system (default)"
	echo -e "\t-a 64 - create iso for a 64-bit system"
	echo -e "\t-b    - break/halt this script to allow manual modification in chroot"
	echo -e "\t-c    - give up the halted task (-b) and clean the files\n"
}

function basepath () {
	local PATH p
	PATH=${1-.}
	[[ -z ${PATH%%/*} ]] || PATH="$(pwd)/$PATH"
	while [[ $PATH == */./* ]]; do PATH=${PATH//\/\.\///}; done
	PATH=${PATH//\/\//\/} 		# Remove //
	while [[ "$PATH" == *..* ]]; do
		p=${PATH%%\/\.\.*}; p=${p%/*}
		PATH=${p}${PATH#*\.\.}
	done
	PATH=${PATH%/*} 			# Remove last tier name
	[[ -z $PATH ]] && PATH='/'
	echo "$PATH"
}

function warn_incompatibility () {
	if [[ $1 != $(uname -m) ]]; then
		echo
		echo "*****************************************************"
		echo "*  Remember your machine architecture               *"
		echo "*  is different from that of the ISO being created. *"
		echo "*****************************************************"
	fi
}

ARCH='i686'			# A 32-bit system as the default one.
BREAK=0 			# BREAK/HALT the script
CLEAN=0 			# DO NOT RESUME the script and REMOVE FILES instead.

# If -b is used, a /mnt/archiso-${USER}-params is created.

# Parse the command line ------------------------
while getopts  ":a:bchv" flag
do
    case "$flag" in
		h) usage && exit;;
		v) echo -e "\n${0##*/} v.${VERSION}"; exit;;
		a) [[ "$OPTARG" -gt 49 ]] && ARCH="x86_64";;
		b) BREAK=1;;
		c) CLEAN=1;;
	esac
done

# Here we go ------------------------------------
if [[ ! -f /mnt/archiso-${USER}-params ]]
then 	# Assume that BREAK was used in the previous run, and resume the script.
	 	# Options are ignored if BREAK was used in previous run.
	# Remove the options parsed above.
	shift `expr $OPTIND - 1`
	ISO="$1"		# Path/name of the official arch installation iso image
	((${#ISO})) || { usage; echo -e "\e[1mMissing parameter.\e[0m"; exit;}
	if [ -f "$ISO" ]; then
		path=$(basepath $ISO)
		ISO=${path}/${ISO##*/}
	else
		usage
		echo -e "\e[31;1m${ISO}\e[0m not found."
		exit 1
	fi
	if (($CLEAN)); then
		echo "Ignoring the -c flag - no previous run files found."
		CLEAN=0
	fi

	# START -----------------------------------------

	[[ -d "/mnt/archiso-$USER" ]] || sudo mkdir "/mnt/archiso-$USER"
	[[ -d "/mnt/rootfs-$USER" ]] || sudo mkdir "/mnt/rootfs-$USER"
	(( $(echo $(grep "/mnt/archiso-$USER" /etc/mtab)|wc -w) )) || \
		sudo mount -t iso9660 -o loop "$ISO" "/mnt/archiso-$USER" 2>/dev/null
	echo -e "\nCopying ${ISO##*/}\n\tto ${path}/archiso"
	cp -ap "/mnt/archiso-$USER/" "${path}/archiso/"
	sudo umount /mnt/archiso-$USER 		# Not needed any longer
	sudo rm -r /mnt/archiso-$USER

	echo "Modifying archiso/arch/boot/syslinux/archiso.cfg"
	echo -e "\tto log in automatically."

	sudo echo -e "PROMPT 0\nDEFAULT arch-${ARCH}\nLABEL arch-${ARCH}
	LINUX boot/${ARCH}/vmlinuz\nINITRD boot/${ARCH}/archiso.img
	APPEND archisobasedir=arch archisolabel=ARCH_$(date +%Y%m)" > \
		"$path"/archiso/arch/boot/syslinux/archiso.cfg

	echo "Removing unnecessary architecture files"
	if [[ $ARCH = "i686" ]]; then 
		echo -e "\tdeleting *x86_64* files and folders"
		rm -r "$path"/archiso/arch/{*x86_64*,/boot/x86_64}
	else
		echo -e "\tdeleting *x686* files and folders"
		rm -r "$path"/archiso/arch/{*i686*,/boot/i686}
	fi

	echo "Unsquashing ...archiso/arch/${ARCH}/root-image.fs.sfs"
	echo -e "\tto $path/archiso-${ARCH}-rootfs"
	echo -e "\tand mounting root-image.fs at /mnt/rootfs-${USER}."

	unsquashfs -d "$path/archiso-${ARCH}-rootfs" "$path"/archiso/arch/${ARCH}/root-image.fs.sfs
	(( $(echo $(grep /mnt/rootfs-$USER /etc/mtab)|wc -w) )) || \
		sudo mount "$path/archiso-${ARCH}-rootfs/root-image.fs" /mnt/rootfs-$USER

	echo
	echo "Modifying files in /mnt/rootfs-$USER"
	echo -e "\tto enable sshd.service at boot."

	# Set sshd to start on boot.
	# Condition:  Does /usr/lib/systemd/system/sshd.service exist?
	# Yes, it does under arch linux!
	# Not elegant much, but neat and working.
	# Elegancko byłoby wypakować
	sudo ln -s /usr/lib/systemd/system/sshd.service /mnt/rootfs-$USER/etc/systemd/system/multi-user.target.wants/

	echo "Allowing an empty password"
	echo -e "\tfor ssh'ing into ssh server."
	# Allow empty passwords for sshd
	sudo sed -i 's/#PermitEmpty.*/PermitEmptyPasswords yes/;' /mnt/rootfs-$USER/etc/ssh/sshd_config

	if (($BREAK)); then
		echo -e "\e[32m"
		echo "ARCH=$ARCH" | sudo tee /mnt/archiso-${USER}-params
		echo "path=$path" | sudo tee -a /mnt/archiso-${USER}-params
		echo "ISO=$ISO" | sudo tee -a /mnt/archiso-${USER}-params
		echo -e "\e[1mScript halted.\e[0m"
		echo -e "\e[1mroot-image.fs \e[0mmounted on\e[1m /mnt/rootfs-$USER\e[0m"
		warn_incompatibility $ARCH
		exit
	fi
else
	echo -e "\e[32mFile /mnt/archiso-$USER-params found."
	if (($CLEAN)); then
		echo "The -c flag invoked."
	else
		echo -e "\e[1mResuming the halted script with previous parameters."
		echo -e "Ignoring the current parameters.\e[0m"
	fi
	source /mnt/archiso-$USER-params 	# Read parameters; Needed for cleanig, too.
	sudo rm /mnt/archiso-${USER}-params
fi
#--------------------------------------------------------------------
# May copy the 'arch-chroot' script to your computer. Comes in handy.
# 'arch-chroot' is available in package extra/arch-install-scripts.
# Or...
# cp -f /mnt/rootfs/usr/bin/arch-chroot "$path"/
# sudo chmod a+x "${path}/arch-chroot"
#--------------------------------------------------------------------

if [[ $CLEAN -eq 0 ]]; then 	# Create a modified iso file
	# Squash rootfs back
	mksquashfs "${path}/archiso-${ARCH}-rootfs" /tmp/root-image.fs.sfs
	mv -f /tmp/root-image.fs.sfs "${path}/archiso/arch/${ARCH}/root-image.fs.sfs"

	# Create a modified arch-installation-media.iso
	genisoimage -l -r -J -V "ARCH_$(date +%Y%m)" -b isolinux/isolinux.bin \
		-no-emul-boot -boot-load-size 4 -boot-info-table -c isolinux/boot.cat \
		-o "${path}/arch-${ARCH}-$(date +%Y%m%d-%H%M).iso" "${path}/archiso"
	(($?)) || \
		echo -e "\e[32;1m${path}/arch-${ARCH}-$(date +%Y%m%d-%H%M).iso\e[0m has been created."
fi
echo -n "Cleaning... "
sudo umount /mnt/rootfs-$USER
rm -r "${path}/archiso-${ARCH}-rootfs"
rm -rf "${path}/archiso" 	# -f required to remove archiso/isolinux/boot.cat
sudo rm -r /mnt/rootfs-$USER
echo "Done."
