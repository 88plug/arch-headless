#!/usr/bin/bash
# by wm/wiemag/dif, original date 2013-09-09
# ---==== INSTALL ARCH LINUX ON A HEADLESS SERVER ====-------------------------
# How to remaster arch.iso image so that it starts automatically, allowing an ssh-administered ("blind") installation of a headless server.
# Assumptions about the computer system arch linux will be installed on:
# - it boots from a CD/DVD first
# - it is connected to the local network
# Currently, the official installation media start with the ssh daemon down.
# v0.95 first published
# v0.96 check if squashfs-tools and cdrkit are installed; If not, ask whether to install.
# v0.97 unnecessary-architecture file system removed from iso image
# v0.98 fix: path=[[ -z "$path" || "$path" == "$ISO" ]] &&...
# v0.99 -f added to one of the cleaning rm commands

VERSION=0.99

# Checking missing dependencies -----------------
if [ -z $(which unsquashfs) ]; then
	echo "The squashfs-tools package is needed."
	read -n1 -sp "Install? (y/N) " INST 
	[[ ${INST/y/Y} = "Y" ]] && { PKGS="squashfs-tools"; echo -ne "\r";} || \
		{ echo -e "\rCome back when you are ready."; exit;}
fi

if [ -z $(which genisoimage) ]; then
	echo -n "The cdrkit package missing"
	(( ${#PKGS} )) && echo ", too." || echo "."
	read -n1 -sp "Install? (y/N) " INST 
	[[ ${INST/y/Y} = "Y" ]] && { PKGS=${PKGS- }" cdrkit"; PKGS=${PKGS/#  /};} || \
		{ echo -e "\rCome back when you are ready."; exit;}
fi

# Installing missing dependencies ---------------
if [[ ${#PKGS} -gt 0 ]]; then
	echo -e "\r\e[32;1msudo pacman -S ${PKGS}\e[0m"
	sudo pacman -S ${PKGS}
fi

# Declarations and initialisation ---------------
function usage() {
	echo -e "\n\e[1march-headless [ -a 32 | 64 ] arch.iso | -h\e[0m\n"
	echo -e "\tarch.iso - path to arch-install-media.iso"
	echo -e "\t           e.g. archlinux-2013.09.01-dual.iso"
	echo -e "\t           or /path/to/archlinux-2013.09.01-dual.iso"
	echo -e "\t-a 32 - install a 32-bit system (default)"
	echo -e "\t-a 64 - install a 64-bit system\n"
}

while getopts  ":a:hv" flag
do
    case "$flag" in
		h) usage && exit;;
		v) echo -e "\n${0##*/} v.${VERSION}"; exit;;
		a) ARCH="$OPTARG";;
	esac
done

# Remove the options parsed above.
shift `expr $OPTIND - 1`
ISO="$1"		# Path/name of the official arch installation iso image
((${#ISO})) || { usage; echo -e "\e[1mMissing parameter.\e[0m"; exit;}
if [ -f "$ISO" ]; then
	path=${ISO%/*}
	[[ -z "$path" || "$path" == "$ISO" ]] && path=$(pwd)
else
	usage
	echo -e "\e[31;1m${ISO}\e[0m not found."
	exit 1
fi

# START -----------------------------------------

[[ -d /mnt/archiso ]] || sudo mkdir /mnt/archiso
[[ -d /mnt/rootfs ]] || sudo mkdir /mnt/rootfs
(( $(echo $(grep /mnt/archiso /etc/mtab)|wc -w) )) || \
	sudo mount -t iso9660 -o loop "$ISO" /mnt/archiso
echo -e "\nCopying ${ISO##*/}\n\tto ${path}/archiso"
cp -a /mnt/archiso "$path"/

echo "Modifying /mnt/archiso/arch/boot/syslinux/archiso.cfg"
echo -e "\tto log in automatically."

ARCH=${ARCH-32}					# A 32-bit sistem as the default one.
[[ $ARCH -lt 50 ]] && ARCH="i686" || ARCH="x86_64"

sudo echo -e "PROMPT 0\nDEFAULT arch-${ARCH}\nLABEL arch-${ARCH}
LINUX boot/${ARCH}/vmlinuz\nINITRD boot/${ARCH}/archiso.img
APPEND archisobasedir=arch archisolabel=ARCH_$(date +%Y%m)" > \
	"$path"/archiso/arch/boot/syslinux/archiso.cfg

echo "Removing unnecessary architecture files"
if [[ $ARCH = "i686" ]]; then 
	echo -e "\tdeleting *x86_64* files and folders"
	rm -r "$path"/archiso/arch/{*x86_64*,/boot/x86_64}
else
	echo -e "\tdeleting *x686* files and folders"
	rm -r "$path"/archiso/arch/{*i686*,/boot/i686}
fi

echo "Modifying ...archiso/arch/${ARCH}/root-image.fs.sfs"
echo -e "\tto start sshd.service at boot."

cp -a /mnt/archiso/arch/${ARCH}/root-image.fs.sfs /tmp/
# Install package 'squashfs-tools'
unsquashfs -d "$path/archiso-${ARCH}-rootfs" /tmp/root-image.fs.sfs
rm /tmp/root-image.fs.sfs
(( $(echo $(grep /mnt/rootfs /etc/mtab)|wc -w) )) || \
	sudo mount "$path/archiso-${ARCH}-rootfs/root-image.fs" /mnt/rootfs
#--------------------------------------------------------------------
# Copy the 'arch-chroot' script to your computer. It comes in handy.
#cp -f /mnt/rootfs/usr/bin/arch-chroot "$path"/
#sudo chmod a+x "${path}/arch-chroot"
#--------------------------------------------------------------------

# Warunek:  Czy istnieje /usr/lib/systemd/system/sshd.service?
# Tak, pod archlinuksem istnieje!
sudo ln -s /usr/lib/systemd/system/sshd.service /mnt/rootfs/etc/systemd/system/multi-user.target.wants/

# Allow empty passwords for sshd
sudo sed -i 's/#PermitEmpty.*/PermitEmptyPasswords yes/;' /mnt/rootfs/etc/ssh/sshd_config

# Squash rootfs back
sudo umount /mnt/rootfs
mksquashfs "${path}/archiso-${ARCH}-rootfs" /tmp/root-image.fs.sfs
mv -f /tmp/root-image.fs.sfs "${path}/archiso/arch/${ARCH}/root-image.fs.sfs"

# Create a modified arch-installation-media.iso
genisoimage -l -r -J -V "ARCH_$(date +%Y%m)" -b isolinux/isolinux.bin \
	-no-emul-boot -boot-load-size 4 -boot-info-table -c isolinux/boot.cat \
	-o "${path}/arch-${ARCH}-$(date +%Y%m%d-%H%M).iso" "${path}/archiso"
(($?)) || \
	echo -e "\e[32;1m${path}/arch-${ARCH}-$(date +%Y%m%d-%H%M).iso\e[0m has been created."
echo -n "Cleaning... "
sudo umount /mnt/archiso
rm -r "${path}/archiso-${ARCH}-rootfs"
rm -rf "${path}/archiso" 	# -f required to remove archiso/isolinux/boot.cat
sudo rm -r /mnt/archiso
sudo rm -r /mnt/rootfs
echo "Done."
