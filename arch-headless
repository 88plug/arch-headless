#!/usr/bin/bash
# by wm/wiemag/dif, original date 2013-09-09, current release 2014-01-31
#
# ---==== INSTALL ARCH LINUX ON A HEADLESS SERVER ====-------------------------
# Remaster arch.iso image so that it starts automatically.
# Allow an ssh-administered ("blind") installation of a headless server.
#
# Assumptions about the computer system arch linux will be installed on:
# - it boots from a CD/DVD first
# - it is connected to the local network
# Currently, the official installation media start with the ssh daemon down.
#
# v1.06 Kernel release verification corrected for cases like 3.16-1 equal to 3.16.0-1

VERSION=1.11 # 2015-07-18, option -l (for locale) added

# Checking if system needs to be rebooted -------
# Necessery if kernel has been updated. Note that e.g. 3.16-1 equals 3.16.0-1.
u=$(uname -r); u=${u%-ARCH}; u=${u/.0-/-}
p=$(pacman -Q linux|cut -d" " -f2)
if [[ $u != $p ]]; then
	echo -e "Kernel installed: ${p}\nKernel running:   $u"
	echo -e "Mounting not possible.\nYour computer needs to be rebooted."
	exit
fi

# Checking missing dependencies -----------------
[[ -z $(which unsquashfs) ]] && { echo "The squashfs-tools package is needed."; exit;}
[[ -z $(which genisoimage) ]] && { 	echo -n "'genisoimage' not found."; exit;}
[[ -z $(which md5sum) ]] && { echo -n "'md5sum' not found. The coreutils package missing"; exit;}

# Declarations and initialisation ---------------
function usage() {
	echo -e "\narch-headless modifies the official arch linux installation"
	echo image to enable passwordless SSH\'ing into the system booted from
	echo -e "the installation media. See man pages (man arch-headless).\n"
	echo -e "\n\e[1march-headless [ -a 32 | 64 ] [-l] [-b] arch.iso | -c | -h | -v\e[0m\n"
	echo -e "\tarch.iso - path to arch-install-media.iso"
	echo -e "\t           e.g. archlinux-2013.09.01-dual.iso"
	echo -e "\t           or /path/to/archlinux-2013.09.01-dual.iso"
	echo -e "\t-a 32 - create iso for a 32-bit system (default)"
	echo -e "\t-a 64 - create iso for a 64-bit system"
	echo -e "\t-l    - copy locale/keybord/font/time-zone settings from host to ISO"
	echo -e "\t-b    - break/halt this script to allow manual modification in chroot"
	echo -e "\t-c    - give up the halted task (-b) and clean the files"
	echo -e "\t-v    - show the ${0##*/} version number\n"
}

function basepath () {
	local PATH p
	PATH=${1-.}
	[[ -z ${PATH%%/*} ]] || PATH="$(pwd)/$PATH"
	while [[ $PATH == */./* ]]; do PATH=${PATH//\/\.\///}; done
	PATH=${PATH//\/\//\/} 		# Remove //
	while [[ "$PATH" == *..* ]]; do
		p=${PATH%%\/\.\.*}; p=${p%/*}
		PATH=${p}${PATH#*\.\.}
	done
	PATH=${PATH%/*} 			# Remove last tier name
	[[ -z $PATH ]] && PATH='/'
	echo "$PATH"
}

function warn_incompatibility () {
	if [[ $1 != $(uname -m) ]]; then
		echo
		echo "+---------------------------------------------------+"
		echo "|  Remember your machine architecture               |"
		echo "|  is different from that of the ISO being created. |"
		echo "+---------------------------------------------------+"
	fi
}

ARCH='i686'		# A 32-bit system as the default one.
BREAK=0 		# If 1, BREAK/HALT the script
CLEAN=0 		# If 1, DO NOT RESUME the script and REMOVE FILES instead.
CP_LOCALE=0 	# If 1, copy locale/keymap/font/time zone configs to ISO.
# archiso/arch/${ARCH}/root-image.fs.sfs name was changed to airootfs.sfs
#+ in ARCHLINUX_ISO-201308 or earlier.
# And an md5 checksum file "airootfs.md5" was added/moved to that folder.
ROOTFS_SFS='airootfs.sfs'		# in archiso/arch/
ROOTFS_IMG='airootfs.img'   	# inside ROOTFS_SFS
ISO_LABEL="ARCH_$(date +%Y%m)" 	# to avoid an unpleasant surprise
ISO_FNAME=''                    # ISO image file name; Set later in the script

# If -b is used, a /mnt/archiso-${USER}-params is created.

# Parse the command line ------------------------
while getopts  ":a:bclhv" flag
do
    case "$flag" in
		h) usage && exit;;
		v) echo -e "\n${0##*/} v.${VERSION}"; exit;;
		a) [[ "$OPTARG" -gt 49 ]] && ARCH="x86_64";;
		b) BREAK=1;;
		c) CLEAN=1;;
		l) CP_LOCALE=1;;
	esac
done

# Here we go ------------------------------------
if [[ ! -f /mnt/archiso-${USER}-params ]] # If the script has NOT been run and halted
then
	shift `expr $OPTIND - 1` 	# Remove the options parsed above.
	ISO="$1"		# Path/name of the official arch installation iso image
	((${#ISO})) || { usage; echo -e "\e[1mMissing parameter.\e[0m"; exit;}
	if [[ -f "$ISO" ]]; then
		path=$(basepath $ISO) 		# Root (/) based path.
		ISO=${path}/${ISO##*/} 		# Full path file name.
	else
		usage
		echo -e "\e[31;1m${ISO}\e[0m not found."
		exit
	fi
	if (($CLEAN)); then
		echo "Ignoring the -c flag - no previous-run files found."
		CLEAN=0
	fi

	# START -----------------------------------------

	[[ -d "/tmp/archiso-$USER" ]] || sudo mkdir "/tmp/archiso-$USER"
	(($?)) && exit 1
	[[ -d "/mnt/rootfs-$USER" ]] || sudo mkdir "/mnt/rootfs-$USER"
	(( $(echo $(grep "/tmp/archiso-$USER" /etc/mtab)|wc -w) )) || \
		sudo mount -t iso9660 -o loop "$ISO" "/tmp/archiso-$USER" 2>/dev/null
	(($?)) && { echo $ISO; echo "Mount error"; exit 2;}
	echo -e "\nCopying ${ISO##*/}\n\tto ${path}/archiso"
	sudo mkdir -p "${path}/archiso/arch/boot"
	sudo cp -apr /tmp/archiso-$USER/{EFI,isolinux,loader} "${path}/archiso"
	sudo cp -apr /tmp/archiso-$USER/arch/{${ARCH},pkglist.${ARCH}.txt} "${path}/archiso/arch"
	sudo cp -apr /tmp/archiso-$USER/arch/boot/{syslinux,${ARCH}} "${path}/archiso/arch/boot/"
	sudo find /tmp/archiso-$USER/arch/boot/ -maxdepth 1 -type f \
		-exec cp -apr '{}' "${path}/archiso/arch/boot" \;
	sync
	sudo umount /tmp/archiso-$USER 		# Not needed any longer
	sudo rm -r /tmp/archiso-$USER

	echo "Modifying archiso/arch/boot/syslinux/archiso.cfg"
	echo -e "\tand archiso/loader/entries/archiso-x86_64.conf to log in automatically."

	sudo echo -e "PROMPT 0\nDEFAULT arch-${ARCH}\nLABEL arch-${ARCH}
	LINUX boot/${ARCH}/vmlinuz\nINITRD boot/${ARCH}/archiso.img
	APPEND archisobasedir=arch archisolabel=${ISO_LABEL}" > \
		"$path"/archiso/arch/boot/syslinux/archiso.cfg

	sudo sed -i "s/archisolabel=ARCH_.*$/archisolabel=${ISO_LABEL}/" "$path"/archiso/loader/entries/archiso-x86_64.conf

## "UEFI: Failed to install override security policy" problem solution:
#	echo "Copying EFI/boot/loader.efi tp EFI/boot/bootx64.efi"
#	echo -e "\tNever tested. Supposed to remedy"
#	echo -e "\tthe 'UEFI: Failed to install override security policy' bug."
#	sudo cp "$path"/archiso/EFI/boot/loader.efi "$path"/archiso/EFI/boot/bootx64.efi
## --------------------------------------------------------------------

	echo "Unsquashing ...archiso/arch/${ARCH}/${ROOTFS_SFS}"
	echo -e "\tto ${path}/archiso-${ARCH}-rootfs/"
	echo -e "\tand mounting the resulting ${ROOTFS_IMG} at /mnt/rootfs-${USER}."

	sudo unsquashfs -d "${path}/archiso-${ARCH}-rootfs" \
		"${path}/archiso/arch/${ARCH}/${ROOTFS_SFS}"

	(( $(echo $(grep /mnt/rootfs-$USER /etc/mtab)|wc -w) )) || \
		sudo mount "$path/archiso-${ARCH}-rootfs/${ROOTFS_IMG}" /mnt/rootfs-$USER

	echo -e "\nModifying files in /mnt/rootfs-$USER"
	echo -e "\tto enable sshd.service at boot."
	# /usr/lib/systemd/system/sshd.service does exist in arch linux!
	sudo ln -s /usr/lib/systemd/system/sshd.service \
		/mnt/rootfs-$USER/etc/systemd/system/multi-user.target.wants/

	echo "Allowing an empty password"
	echo -e "\tfor ssh'ing into ssh server."
	# Allow empty passwords for sshd
	sudo sed -i 's/#PermitEmpty.*/PermitEmptyPasswords yes/;' /mnt/rootfs-$USER/etc/ssh/sshd_config

	echo "Adding an alias to /etc/zshrc (Author's idiosyncrasy):"
	echo -e "\talias s='systemctl'\n"
	# Add it as the first line in the zshrc configuration file
	sudo sed -i "1s/^/alias s='systemctl'\n/" /mnt/rootfs-$USER/etc/zsh/zshrc
	# Copy locale settings and time zone to ISO
	if ((CP_LOCALE)); then
		echo "Copying time zone and locale settings from host to ISO."
		[[ -f /etc/localtime ]] && \
			sudo cp -d /etc/localtime /mnt/rootfs-$USER/etc/ && \
			echo -e "\tTime zone set ($(readlink -n /etc/localtime))."
		[[ -f /etc/vconsole.conf ]] && \
			sudo cp /etc/vconsole.conf /mnt/rootfs-$USER/etc/ && \
			echo -e "\tvconsole.conf copied:" && \
			awk -v TABS='\t\t' '{$0=TABS$0; print}' /etc/vconsole.conf
		sudo cp /etc/locale.* /mnt/rootfs-$USER/etc/ && \
			echo -e  "\t/etc/locale.* files copied."
		sudo cp /usr/lib/locale/locale-archive /mnt/rootfs-$USER/usr/lib/locale/ && \
			echo -e  "\t/usr/lib/locale/locale-archive copied.\n"
		# FOR A REASON VIRTUAL MACHINE DOES NOT READ FONT_MAP from /ect/vconsole.conf
		# Thus is a work around
		SCRIPT="KEYMAP=''; FONT=''; FONT_MAP=''\n
		[[ -f /etc/vconsole.conf ]] && 	source /etc/vconsole.conf\n
		[[ -n \$KEYMAP ]] && loadkeys \$KEYMAP\n
		if [[ -n \$FONT ]]; then\n
			\t[[ -n \$FONT_MAP ]] && setfont \$FONT -m \$FONT_MAP\n
		fi\n"
		cat <(echo -e $SCRIPT) /mnt/rootfs-$USER/etc/zsh/zshrc > zshrc.new && \
			sudo mv zshrc.new /mnt/rootfs-$USER/etc/zsh/zshrc
	fi

	if (($BREAK)); then
		echo -ne "\e[32m"
		echo "ARCH=$ARCH" | sudo tee /mnt/archiso-${USER}-params
		echo "path=$path" | sudo tee -a /mnt/archiso-${USER}-params
		echo "ISO=$ISO"  #| sudo tee -a /mnt/archiso-${USER}-params
		echo -e "\e[1mScript halted.\e[0m"
		echo You can re-run it without parameters to create an ISO,
		echo or with the flag \'-c\' to abandon the task and clean up.
		echo -e "Root image (file \e[1m${ROOTFS_IMG}\e[0m) mounted on\e[1m /mnt/rootfs-$USER\e[0m"
		warn_incompatibility $ARCH
		exit
	fi
else	# Assume that BREAK was used in the previous run, and resume the script.
	 	# Options are ignored if BREAK was used in previous run.
	echo -e "\n\e[32mFile /mnt/archiso-$USER-params found."
	if (($CLEAN)); then
		echo -e "The -c flag invoked.\e[0m\n"
	else
		echo "Resuming the halted script with previous parameters."
		echo -e "Ignoring the current parameters.\e[0m"
	fi
	source /mnt/archiso-$USER-params 	# Read parameters; Needed for cleanig, too.
	sudo rm /mnt/archiso-${USER}-params
fi

if [[ $CLEAN -eq 0 ]]; then 	# Create a modified iso file
	# Squash rootfs image back
	sudo mksquashfs "${path}/archiso-${ARCH}-rootfs/${ROOTFS_IMG}" /tmp/${ROOTFS_SFS}
	(($?)) && echo 3
	sudo mv -f /tmp/${ROOTFS_SFS} "${path}/archiso/arch/${ARCH}/${ROOTFS_SFS}"
	CURDIR="$PWD"
	cd "${path}/archiso/arch/${ARCH}/"
	sudo md5sum "${ROOTFS_SFS}" >"${ROOTFS_SFS%.*}".md5
	cd "$CURDIR"

	# Create a modified arch-installation-media.iso
	ISO_FNAME=arch-${ARCH}-$(date +%Y%m%d-%H%M).iso
	genisoimage -l -r -J -V ${ISO_LABEL} -b isolinux/isolinux.bin \
		-no-emul-boot -boot-load-size 4 -boot-info-table -c isolinux/boot.cat \
		-o "${path}/${ISO_FNAME}" "${path}/archiso"
	(($?)) || { echo -e "\nThe installation ISO image";
		echo -e "\t\e[32;1m${path}/${ISO_FNAME}\e[0m\nhas been created.";
		echo -e "\n*** Run\n\t\e[1misohybrid [OPTIONS] ${ISO_FNAME}\e[0m";
		echo -e "if you want to install the image on a USB drive.\n";}
fi
echo -n "Cleaning... "
sudo umount /mnt/rootfs-$USER
(($?)) && echo Failed to unmount \'/mnt/rootfs-$USER\'
rm -r "${path}/archiso-${ARCH}-rootfs"
rm -rf "${path}/archiso" 	# -f required to remove archiso/isolinux/boot.cat
sudo rm -r /mnt/rootfs-$USER
echo "Done."
